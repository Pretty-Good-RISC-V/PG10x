#!/bin/bash
#
# Bluespec compiler driver for CMake
#
set -e

function join_by 
{ 
    local IFS="$1"; shift; echo "$*"; 
}

VERBOSE=false

function log
{
    if [ "$VERBOSE" == "true" ]; then 
        echo "$*"
    fi
}

function getabspath 
{
    if [ -d "$1" ]; then 
        echo $(cd "$1"; pwd); 
    else
        echo $(cd $(dirname "$1"); pwd)/$(basename "$1"); 
    fi
}

BSV_COMPILER="bsc"
COMMAND_LINE=$*

#
# verify compiler exists
#
if ! command -v $BSV_COMPILER &> /dev/null
then
    echo "[bsvc] ERROR: bsc executable could not be found in system PATH."
    exit 1
fi

#
# Parse options
#
OUTPUT=""
TARGET=""
INCLUDE_DIRECTORIES=("%/Libraries")
COMPILE=true
LINK=""
DEFINITIONS=""
OUTPUT_TYPE="-sim"
POSITIONAL=()
VERILOG=""
VDIR_SPEC=""
TOP_MODULE_SWITCH="-e"

while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -o|--output)
            OUTPUT="$2"
            shift # past argument
            shift # past value
            ;;
        -I)
            log "[bsvc] Library Include Directory Specified: $2"
            INCLUDE_DIRECTORIES+=("$2")
            shift # past argument
            shift # past value
            ;;
        --link)
            LINK=true
            COMPILE=false
            shift
            ;;
        -t)
            TARGET=$2
            shift # past argument
            shift # past value
            ;;
        --verilog)
            OUTPUT_TYPE="-verilog"
            VERILOG="true"
            TOP_MODULE_SWITCH="-g"
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift # past argument
            ;;
        -D*)
            DEFINITIONS="$DEFINITIONS -D ${1:2}"
            log "[bsvc] Definition added: ${1:2}"
            shift
            ;;
        -L*)
            log "[bsvc] Ignoring library specification: ${key}"
            shift
            ;;
        -l*)
            log "[bsvc] Ignoring library specification: ${key}"
            shift
            ;;
        *)    # unknown option
            # If it's a directory, assume it's an include directory
            if [ "$TARGET" == "" ] || [[ $1 != *$TARGET ]]; then
                POSITIONAL+=("$1")
                log "[bsvc] Adding optional argument: $1"
            fi
            shift # past argument
            ;;
    esac
done

log "[bsvc] COMMAND_LINE: $COMMAND_LINE"

if [ ${#POSITIONAL[@]} -eq 0 ]; then
    echo "[bsvc] ERROR: No input files specified."
    echo "[bsvc] Command line given: $COMMAND_LINE"
    exit 1
fi

if [ ${#POSITIONAL[@]} -gt 1 ] && [ "$COMPILE" == "true" ]; then
    echo "[bsvc] ERROR: Extra arguments detected."
    echo "[bsvc] Command line given: $COMMAND_LINE"
    exit 1
fi

if [ -z "$OUTPUT" ]; then
    echo "[bsvc] ERROR: -o option is required"
    echo "[bsvc] Command line given: $COMMAND_LINE"
    exit 1
fi

# Determine the output directory based on the dirname of the output specified
OUTPUT_DIR=$(dirname "$OUTPUT")
INPUT_FILE=${POSITIONAL[0]}
SOURCE_DIR=$(dirname "$INPUT_FILE")

# Create the include directory spec by joining all directories specified
# delimited by a colon ':'
#
INCLUDE_DIRECTORIES_SPEC=$(join_by : "${INCLUDE_DIRECTORIES[@]}")

BSC_COMMON="-aggressive-conditions -show-schedule -u -q -check-assert"
BSC_COMMON="$BSC_COMMON -bdir $OUTPUT_DIR -simdir $OUTPUT_DIR -info-dir $OUTPUT_DIR -vdir $OUTPUT_DIR"
BSC_COMMON="$BSC_COMMON -p $SOURCE_DIR:$INCLUDE_DIRECTORIES_SPEC"

if [ "$VERILOG" == "true" ]; then
    log "[bsvc] Verilog Output..."
    if [ "$LINK" == "" ]; then
        unset POSITIONAL[0]

        TOP_MODULE=mk$(basename "$INPUT_FILE" .bsv)
        log "[bsvc] Creating verilog file (wrapped as a .bo) "$OUTPUT" for top module $TOP_MODULE"

        log "[bsvc] BSV COMMAND LINE: $BSV_COMPILER $BSC_COMMON $OUTPUT_TYPE $DEFINITIONS $TOP_MODULE_SWITCH $TOP_MODULE -o $OUTPUT ${POSITIONAL[@]} $INPUT_FILE"

        OUTPUT_DIR="$(dirname $OUTPUT)"
        OUTPUT_FILENAME="$(basename $OUTPUT)"

        VERILOG_FILENAME="$OUTPUT_DIR/mk$(basename $OUTPUT .bsv.bo).v"

        $BSV_COMPILER $BSC_COMMON $OUTPUT_TYPE $DEFINITIONS $TOP_MODULE_SWITCH $TOP_MODULE ${POSITIONAL[@]} "$INPUT_FILE"
    else
        log "[bsvc] copying $INPUT_FILE to $OUTPUT"

        cp "$(dirname $INPUT_FILE)/"*.v "$(dirname $OUTPUT)"
    fi
elif [ "$LINK" == "true" ]; then
    unset POSITIONAL[0]

    TOP_MODULE=mk$(basename "$INPUT_FILE" .bsv.bo)
    log "[bsvc] Creating file $(basename "$OUTPUT") for topmodule $TOP_MODULE"

    log "[bsvc] BSV COMMAND LINE: $BSV_COMPILER $BSC_COMMON $OUTPUT_TYPE $DEFINITIONS $TOP_MODULE_SWITCH $TOP_MODULE -o \"$OUTPUT\" ${POSITIONAL[@]}"

    # Run the linker
    $BSV_COMPILER $BSC_COMMON $OUTPUT_TYPE $DEFINITIONS $TOP_MODULE_SWITCH $TOP_MODULE -o "$OUTPUT" ${POSITIONAL[@]}
else
    log "[bsvc] Creating object file $(basename "$INPUT_FILE" .bsv).bo"

    # Run the compiler
    $BSV_COMPILER $BSC_COMMON $OUTPUT_TYPE $DEFINITIONS "$INPUT_FILE"
fi
