//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a87)
//
// On Sat Apr 23 11:03:22 PDT 2022
//
//
// Ports:
// Name                         I/O  size props
// read1                          O    32
// RDY_read1                      O     1 const
// read2                          O    32
// RDY_read2                      O     1 const
// RDY_write                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 unused
// read1_index                    I     5
// read2_index                    I     5
// write_index                    I     5
// write_value                    I    32 reg
// EN_write                       I     1
//
// Combinational paths from inputs to outputs:
//   read1_index -> read1
//   read2_index -> read2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkGPRFile(CLK,
		 RST_N,

		 read1_index,
		 read1,
		 RDY_read1,

		 read2_index,
		 read2,
		 RDY_read2,

		 write_index,
		 write_value,
		 EN_write,
		 RDY_write);
  input  CLK;
  input  RST_N;

  // value method read1
  input  [4 : 0] read1_index;
  output [31 : 0] read1;
  output RDY_read1;

  // value method read2
  input  [4 : 0] read2_index;
  output [31 : 0] read2;
  output RDY_read2;

  // action method write
  input  [4 : 0] write_index;
  input  [31 : 0] write_value;
  input  EN_write;
  output RDY_write;

  // signals for module outputs
  wire [31 : 0] read1, read2;
  wire RDY_read1, RDY_read2, RDY_write;

  // ports of submodule regfile
  wire [31 : 0] regfile$D_IN, regfile$D_OUT_1, regfile$D_OUT_2;
  wire [4 : 0] regfile$ADDR_1,
	       regfile$ADDR_2,
	       regfile$ADDR_3,
	       regfile$ADDR_4,
	       regfile$ADDR_5,
	       regfile$ADDR_IN;
  wire regfile$WE;

  // value method read1
  assign read1 = (read1_index == 5'd0) ? 32'd0 : regfile$D_OUT_2 ;
  assign RDY_read1 = 1'd1 ;

  // value method read2
  assign read2 = (read2_index == 5'd0) ? 32'd0 : regfile$D_OUT_1 ;
  assign RDY_read2 = 1'd1 ;

  // action method write
  assign RDY_write = 1'd1 ;

  // submodule regfile
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd32),
	    .lo(5'h0),
	    .hi(5'd31)) regfile(.CLK(CLK),
				.ADDR_1(regfile$ADDR_1),
				.ADDR_2(regfile$ADDR_2),
				.ADDR_3(regfile$ADDR_3),
				.ADDR_4(regfile$ADDR_4),
				.ADDR_5(regfile$ADDR_5),
				.ADDR_IN(regfile$ADDR_IN),
				.D_IN(regfile$D_IN),
				.WE(regfile$WE),
				.D_OUT_1(regfile$D_OUT_1),
				.D_OUT_2(regfile$D_OUT_2),
				.D_OUT_3(),
				.D_OUT_4(),
				.D_OUT_5());

  // submodule regfile
  assign regfile$ADDR_1 = read2_index ;
  assign regfile$ADDR_2 = read1_index ;
  assign regfile$ADDR_3 = 5'h0 ;
  assign regfile$ADDR_4 = 5'h0 ;
  assign regfile$ADDR_5 = 5'h0 ;
  assign regfile$ADDR_IN = write_index ;
  assign regfile$D_IN = write_value ;
  assign regfile$WE = EN_write && write_index != 5'd0 ;
endmodule  // mkGPRFile

