//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a87)
//
// On Sat Apr 23 11:03:21 PDT 2022
//
//
// Ports:
// Name                         I/O  size props
// execute                        O    33
// RDY_execute                    O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// execute_operator               I    11
// execute_operand1               I    32
// execute_operand2               I    32
//
// Combinational paths from inputs to outputs:
//   (execute_operator, execute_operand1, execute_operand2) -> execute
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkALU(CLK,
	     RST_N,

	     execute_operator,
	     execute_operand1,
	     execute_operand2,
	     execute,
	     RDY_execute);
  input  CLK;
  input  RST_N;

  // value method execute
  input  [10 : 0] execute_operator;
  input  [31 : 0] execute_operand1;
  input  [31 : 0] execute_operand2;
  output [32 : 0] execute;
  output RDY_execute;

  // signals for module outputs
  wire [32 : 0] execute;
  wire RDY_execute;

  // remaining internal signals
  reg [31 : 0] IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42;

  // value method execute
  assign execute =
	     { execute_operator == 11'b0 ||
	       execute_operator == 11'b00100000000 ||
	       execute_operator == 11'b00000000111 ||
	       execute_operator == 11'b00000000110 ||
	       execute_operator == 11'b00000000100 ||
	       execute_operator == 11'b00000000011 ||
	       execute_operator == 11'b00000000010 ||
	       execute_operator == 11'b00000000001 ||
	       execute_operator == 11'b00100000101 ||
	       execute_operator == 11'b00000000101,
	       IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 } ;
  assign RDY_execute = 1'd1 ;

  // remaining internal signals
  always@(execute_operator or execute_operand1 or execute_operand2)
  begin
    case (execute_operator)
      11'b0:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      execute_operand1 + execute_operand2;
      11'b00000000001:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      execute_operand1 << execute_operand2[4:0];
      11'b00000000010:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      ((execute_operand1 ^ 32'h80000000) <
	       (execute_operand2 ^ 32'h80000000)) ?
		32'd1 :
		32'd0;
      11'b00000000011:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      (execute_operand1 < execute_operand2) ? 32'd1 : 32'd0;
      11'b00000000100:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      execute_operand1 ^ execute_operand2;
      11'b00000000110:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      execute_operand1 | execute_operand2;
      11'b00000000111:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      execute_operand1 & execute_operand2;
      11'b00100000000:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      execute_operand1 - execute_operand2;
      11'b00100000101:
	  IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
	      execute_operand1 >> execute_operand2[4:0] |
	      ~(32'hFFFFFFFF >> execute_operand2[4:0]) &
	      {32{execute_operand1[31]}};
      default: IF_execute_operator_EQ_0b0_THEN_execute_operan_ETC___d42 =
		   execute_operand1 >> execute_operand2[4:0];
    endcase
  end
endmodule  // mkALU

